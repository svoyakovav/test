#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("./update-notifier");
var commander_1 = __importDefault(require("commander"));
var index_1 = require("../index");
var open_1 = __importDefault(require("open"));
var pkgVer = require('../../package.json').version;
var ora_1 = __importDefault(require("ora"));
var DEFAULT_PORT = 3355;
commander_1.default
    .version(pkgVer)
    .description('An easy CLI tool to open swagger.json or .yaml files in Swagger UI.')
    .arguments('<swagger-file>')
    .action(handle)
    .option('-O, --open', 'Open stuff in browser')
    .option('-P, --port <port>', 'Preferred port. If not available, a random port is selected');
commander_1.default.parse(process.argv);
/**
 * Handles incoming file
 * @param {string} file swagger file
 */
function handle(file) {
    return __awaiter(this, void 0, void 0, function () {
        var spinner, _a, port, swagFilePath, viewUrl, err_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    spinner = ora_1.default('Loading file ..').start();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 5, , 6]);
                    return [4 /*yield*/, index_1.startServerWithSwaggerFile(file, sanitizePort(commander_1.default.port))];
                case 2:
                    _a = _b.sent(), port = _a.port, swagFilePath = _a.swagFilePath;
                    spinner.text = "Loading file " + swagFilePath;
                    viewUrl = "http://localhost:" + port + "/swagger-doc";
                    if (!commander_1.default.open) return [3 /*break*/, 4];
                    return [4 /*yield*/, open_1.default(viewUrl)];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    spinner.succeed();
                    console.log("Swagger open on port " + port);
                    if (commander_1.default.open) {
                        console.log('Opening browser at ' + viewUrl);
                    }
                    return [3 /*break*/, 6];
                case 5:
                    err_1 = _b.sent();
                    spinner.fail();
                    console.error(err_1);
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    });
}
/**
 * Handle the incoming preferred port request
 * @param {number|string} port preferred port
 * @return {number}
 */
function sanitizePort(port) {
    if (!port) {
        return DEFAULT_PORT;
    }
    if (typeof port === 'string') {
        port = +port;
    }
    return port;
}
//# sourceMappingURL=open-swagger-ui.js.map